package view;

import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;

import java.util.ArrayList;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.widgets.Text;

import model.DatabaseConnector;

import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.Combo;

public class MainWindow {

	protected Shell shell;
	private Text searchText;
	private boolean tableIsVisible = false;
	private boolean doubleID = false;
	private boolean isTextTabSet = false;
	private boolean isDeletionSet = false;
	private Table table;
	private Text textResult;
	private Text firstIDToDelete;
	private Text secondIDToDelete;
	private int attributesNumber = 0;
	private Text[] textTab = new Text[2];
	
	/**
	 * Launch the application.
	 * @param args
	 */
	public static void main(String[] args) {
		try {
			MainWindow window = new MainWindow();
			window.open();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Open the window.
	 */
	public void open() {
		Display display = Display.getDefault();
		createContents();
		shell.open();
		shell.layout();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) {
				display.sleep();
			}
		}
	}

	/**
	 * Create contents of the window.
	 */
	protected void createContents() {
		shell = new Shell();
		shell.setSize(1035, 700);
		shell.setText("SWT Application");
		
	    textResult = new Text(shell, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
	    textResult.setBounds(20, 156, 1005, 227);
	    textResult.setEditable(false);
	    textResult.setVisible(false);
		
		searchText = new Text(shell, SWT.BORDER);
		searchText.setBounds(20, 20, 247, 39);
		searchText.setMessage("Search...");
		
		Button btnSubmitSearch = new Button(shell, SWT.NONE);
		btnSubmitSearch.setBounds(140, 74, 127, 28);
		btnSubmitSearch.setText("Submit Search");
		
		Button btnAdvancedOptions = new Button(shell, SWT.NONE);
		btnAdvancedOptions.setBounds(115, 118, 152, 28);
		btnAdvancedOptions.setText("Advanced Options");
		
		table = new Table(shell, SWT.BORDER | SWT.CHECK | SWT.V_SCROLL | SWT.FULL_SELECTION);
		table.setVisible(tableIsVisible);	    
		table.setBounds(20, 152, 247, 249);
		table.setHeaderVisible(true);
		table.setLinesVisible(true);
		table.setHeaderVisible(false);
					
		createTableItems();
		
		btnSubmitSearch.addSelectionListener(new SelectionListener(){

			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void widgetSelected(SelectionEvent arg0) {
				TableItem[] itemsSelected = table.getItems();
				ArrayList<String> selectedTable = new ArrayList<>();
				for(int i = 0; i < itemsSelected.length; i++){
					if(itemsSelected[i].getChecked()){
						selectedTable.add(itemsSelected[i].getText());
					}
				}
				
				String search = searchText.getText();
				String result = "";
				
				DatabaseConnector dbConnector = new DatabaseConnector();
				
				if(selectedTable.isEmpty()){
					selectedTable.add("ARTISTS");
					selectedTable.add("BRANDGROUP");
					selectedTable.add("CHARACTERS");
					selectedTable.add("COUNTRY");
					selectedTable.add("GENRE");
					selectedTable.add("INDICIAPUBLISHER");
					selectedTable.add("ISSUE");
					selectedTable.add("LANGUAGE");
					selectedTable.add("PERSONS");
					selectedTable.add("PUBLISHER");
					selectedTable.add("SERIES");
					selectedTable.add("STORY");
					selectedTable.add("STORY_TYPE");
				}
				
				for(String table : selectedTable){
					String tmpResult = dbConnector.searchElement(table, search);
					if(tmpResult != ""){
						result = result + System.lineSeparator() + "Found in table: "+ table + System.lineSeparator() + tmpResult;
					}
				}
				
				displayResult(result);
				
				dbConnector.closeConnection();
			}
			
		});
	
		btnAdvancedOptions.addSelectionListener(new SelectionListener(){

			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void widgetSelected(SelectionEvent arg0) {
				textResult.setVisible(false);
				tableIsVisible = !tableIsVisible;
				table.setVisible(tableIsVisible);
			}
			
		});
		
		Combo combo = new Combo(shell, SWT.NONE);
		combo.setBounds(372, 19, 185, 67);
		
        String[] preselectedQueriesTable = new String[]{"Deliverable 2 : a", "Deliverable 2 : b", "Deliverable 2 : c", "Deliverable 2 : d",
                "Deliverable 2 : e", "Deliverable 2 : f", "Deliverable 2 : g", "Deliverable 2 : h", "Deliverable 3 : a", "Deliverable 3 : b",
                "Deliverable 3 : c", "Deliverable 3 : d", "Deliverable 3 : e", "Deliverable 3 : f", "Deliverable 3 : g", "Deliverable 3 : h",
                "Deliverable 3 : i", "Deliverable 3 : j", "Deliverable 3 : k", "Deliverable 3 : l", "Deliverable 3 : m", "Deliverable 3 : n",
                "Deliverable 3 : o", };
        
		combo.setItems(preselectedQueriesTable);
		
		Button btnSubmitPreselected = new Button(shell, SWT.NONE);
		btnSubmitPreselected.setBounds(430, 47, 127, 28);
		btnSubmitPreselected.setText("Submit Query");
		
		btnSubmitPreselected.addSelectionListener(new SelectionListener(){

			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void widgetSelected(SelectionEvent arg0) {
				int index = combo.getSelectionIndex();
				String query = "";
				
				switch (index) {
                case 0 :
                	query = "SELECT BG.name  FROM BrandGroup BG,(SELECT coupid.pid AS topid FROM (	SELECT IP.publisher_id AS pid FROM IndiciaPublisher IP, Country C WHERE IP.country_id = C.id and C.name = 'Belgium' GROUP BY IP.publisher_id ORDER BY COUNT(IP.id) DESC) coupid WHERE ROWNUM = 1) toppub WHERE BG.publisher_id = toppub.topid";
                    break;
                case 1 :
                	query = "SELECT P.id, P.name FROM Publisher P, Series S, Country C WHERE S.country_id = C.id and C.name = 'Denmark' and S.publisher_id = P.id and S.publication_type = 'book'";
                    break;
                case 2 :
                	query = "SELECT S.name"+
                			"FROM Series S, Country C"+
                			"WHERE S.publication_type = 'magazine' and S.country_id = C.id and C.name = 'Switzerland'";
                    break;
                case 3 :
                	query = "Select I.publication_date, count(I.id)"+
                			"From Issue I"+
                			"Where I.publication_date >= 1990"+
                			"Group By I.publication_date"+
                			"Order By I.publication_date asc";
                    break;
                case 4 :
                	query = "Select IP.name, count(S.id)"+
                			"From IndiciaPublisher IP, Series S, Issue I"+
                			"Where IP.name LIKE '%DC Comics%' and (I.id = S.first_issue_id or I.id = S.last_issue_id) and I.Indicia_publisher_id = IP.id"+
                			"Group By IP.name";
                    break;
                case 5 :
                	query = "Select title"+
                			"From ("+
                					  "Select S.title AS title, COUNT(DISTINCT SR.origin_id) AS count_reprint"+
                					  "From Story S, StoryReprint SR"+
                					  "Where S.id = SR.origin_id"+
                					  "Group By S.id, S.title"+
                					  "Order By count_reprint DESC)"+
                					"Where ROWNUM <= 10";
                    break;
                case 6 :
                	query = "Select P.name"+
                			"From Persons P, Inks I, Colors C, Pencils Pen"+
                			"Where P.id = I.person_id and P.id = C.person_id and P.id = Pen.artist_id and I.story_id = C.story_id and I.story_id = Pen.story_id"+
                			"Group By P.name";
                    break;
                case 7 :
                	query = "SELECT S.title"+
                			"FROM Characters C, Feature F, Main M, Story S, ("+
                					  "SELECT S2.id"+
                					  "FROM Story S2, StoryReprint SR"+
                					  "WHERE NOT EXISTS (Select S3.id"+
                					                    "From Story S3"+
                					                    "Where SR.origin_id = S3.id"+
                					                    "Group By S3.id)"+
                					  ") noreprint"+
                					"WHERE LOWER(C.name) LIKE '%batman%' AND"+
                					                    "C.id = M.character_id AND"+
                					                    "C.id <> F.character_id AND"+
                					                    "noreprint.id = M.story_id";
                    break;
                case 8 :
                	query = "SELECT SE.name"+
                			"FROM SERIES SE,"+
                			"(SELECT DISTINCT I.name, I.series_id"+
                			"FROM ISSUE I, STORY S,"+
                				"(SELECT mycount.typeid as id"+
                				"FROM (SELECT ST.id AS typeid"+
                						"FROM STORY_TYPE ST, STORY S"+
                						"WHERE S.type_id = ST.id"+
                						"GROUP BY S.type_id"+
                						"ORDER BY COUNT(S.id) DESC) mycount"+
                				"WHERE ROWNUM = 1) maxtype"+
                			"WHERE S.issue_id = I.id AND S.type_id <> maxtype.id) myissues"+
                		"WHERE myissues.series_id = SE.id AND ROWNUM = 1"+
                		"GROUP BY myissues.series_id"+
                		"ORDER BY COUNT(myissues.series_id) DESC";
                    break;
                case 9 :
                	//b
                    break;
                case 10 :
                	//c
                    break;
                case 11 :
                	//d
                    break;
                case 12 :
                	//e
                    break;
                case 13 :
                	query = "Select L.name, Res.num"+
                			"From (Select SE.language_id as id, Count(SE.language_id) as num"+
                					"From Story ST, Series SE, Issue I"+
                					"Where ST.issue_id = I.id and I.series_id = SE.id and SE.publication_type = 'magazine'"+
                					"Group By SE.language_id"+
                					"Having Count(*) > 10000) Res, Language L"+
                			"Where L.id = Res.id";
                    break;
                case 14 :
                	query = "Select Type.name"+
                			"From Story_Type Type"+
                			"Where Type.id not in ("+
                				"Select distinct ST.type_id"+
                				"From Story ST, Series SE, Issue I, Language L"+
                				"Where ST.issue_id = I.id and I.series_id = SE.id and SE.language_id = L.id and L.name = 'Italian' and SE.publication_type = 'magazine')";
                    break;
                case 15 :
                    break;
                case 16 :
                    break;
                case 17 :
                    break;
                case 18 :
                    break;
                case 19 :
                    break;
                case 20 :
                    break;
                case 21 :
                    break;
                case 22 :
                    break;
				}
				
				DatabaseConnector dbConnector = new DatabaseConnector();
				
				String result = dbConnector.executeQuery(query);
				
				displayResult(result);	
				
				dbConnector.closeConnection();
			}
								
		});
			
		Combo comboInsert = new Combo(shell, SWT.NONE);
		comboInsert.setBounds(617, 19, 170, 40);
		comboInsert.setText("Choose table: ");
		
	    String[] availableTables = new String[]{"Artists", "Authors", "BrandGroup", "Characters",
	            "Colors", "Country", "Editors", "Feature",
	            "Genre", "Has_Characters", "Has_Genre",
	            "Has_Story_Type", "Has_Type",
	            "IndiciaPublisher", "Inks", "Issue", "IssueReprint",
	            "Language", "Letters", "Main", "Pencils", "Persons", "Publisher",
	            "Series", "Story", "Story_Type", "StoryReprint"};
	    
	    comboInsert.setItems(availableTables);
	    
	    comboInsert.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
				textResult.setVisible(false);
				String comboSelected = comboInsert.getText().toUpperCase();
				if(isTextTabSet){
					for(int i = 0; i < textTab.length; i++){
						textTab[i].setVisible(false);
					}
				}
				
				String[] listAttributes = new String[]{};
				
				switch(comboSelected){
				case "ARTISTS" :
					listAttributes = new String[]{"ID", "NAME"};
					break;
					
				case "AUTHORS" :
					listAttributes = new String[]{"STORY_ID", "PERSONS_ID"};
					break;
					
				case "BRANDGROUP" :
					listAttributes = new String[]{"ID", "NAME", "PUBLISHER_ID", "YEAR_BEGAN", "YEAR_ENDED", "NOTES", "URL"};
					break;
					
				case "CHARACTERS" : 
					listAttributes = new String[]{"ID", "NAME"};
					break;
					
				case "COLORS" :
					listAttributes = new String[]{"STORY_ID", "PERSON_ID"};
					break;
					
				case "COUNTRY" :
					listAttributes = new String[]{"ID", "CODE", "NAME"};
					break;
					
				case "EDITORS" :
					listAttributes = new String[]{"STORY_ID", "PERSON_ID"};
					break;
					
				case "FEATURE" :
					listAttributes = new String[]{"STORY_ID", "CHARACTER_ID"};
					break;
					
				case "GENRE" :
					listAttributes = new String[]{"ID", "NAME"};
					break;
					
				case "HAS_CHARACTERS" :
					listAttributes = new String[]{"STORY_ID", "CHARACTER_ID"};
					break;
					
				case "HAS_GENRE" :
					listAttributes = new String[]{"STORY_ID", "GENRE_ID"};
					break;
					
				case "HAS_STORY_TYPE" :
					listAttributes = new String[]{"STORY_ID", "TYPE_ID"};
					break;
					
				case "HAS_TYPE" :
					listAttributes = new String[]{"STORY_ID", "TYPE_ID"};
					break;
					
				case "INDICIAPUBLISHER" :
					listAttributes = new String[]{"ID", "NAME", "YEAR_BEGAN", "YEAR_ENDED", "NOTES", "URL", "COUNTRY_ID", "PUBLISHER_ID", "IS_SURROGATE"};
					break;
					
				case "INKS" :
					listAttributes = new String[]{"STORY_ID", "PERSON_ID"};
					break;
					
				case "ISSUE" :
					listAttributes = new String[]{"ID", "ISSUE_NUMBER", "INDICIA_PUBLISHER_ID", "PUBLICATION_DATE", "PRICE", "PAGE_COUNT", "INDICIA_FREQUENCY", "EDITING", "NOTES", "ISBN", "VALID_ISBN", "BARCODE", "TITLE", "ON_SALE_DATE", "RATING", "SERIES_ID"};
					break;
					
				case "ISSUEREPRINT" :
					listAttributes = new String[]{"ID", "ORIGIN_ISSUE_ID", "TARGET_ISSUE_ID"};
					break;
					
				case "LANGUAGE" :
					listAttributes = new String[]{"ID", "CODE", "NAME"};
					break;
					
				case "LETTERS" :
					listAttributes = new String[]{"STORY_ID", "PERSON_ID"};
					break;
					
				case "MAIN" :
					listAttributes = new String[]{"STORY_ID", "CHARACTER_ID"};
					break;
					
				case "PENCILS" :
					listAttributes = new String[]{"STORY_ID", "ARTIST_ID"};
					break;
					
				case "PERSONS" :
					listAttributes = new String[]{"ID", "NAME"};
					break;
					
				case "PUBLISHER" :
					listAttributes = new String[]{"ID", "NAME", "YEAR_BEGAN", "YEAR_ENDED", "NOTES", "URL", "COUNTRY_ID"};
					break;
					
				case "SERIES" :
					listAttributes = new String[]{"ID", "NAME", "FORMAT", "PUBLICATION_DATES", "YEAR_BEGAN", "YEAR_ENDED", "FIRST_ISSUE_ID", "LAST_ISSUE_ID", "PUBLISHER_ID", "COUNTRY_ID", "LANGUAGE_ID", "NOTES", "COLOR", "DIMENSIONS", "PAPER_STOCK", "BINDING", "PUBLISHING_FORMAT", "PUBLICATION_TYPE"};
					break;
					
				case "STORY" :
					listAttributes = new String[]{"ID", "TITLE", "ISSUE_ID", "SYNPOSIS", "REPRINT_NOTES", "NOTES", "TYPE_ID"};
					break;
					
				case "STORY_TYPE" :
					listAttributes = new String[]{"ID", "NAME"};
					break;
					
				case "STORYREPRINT" :
					listAttributes = new String[]{"ID", "ORIGIN_ID", "TARGET_ID"};
					break;
					
				default : 
					System.out.println("WRONG TABLE INPUT");

				}
				
				attributesNumber = listAttributes.length;
				
				textTab = new Text[attributesNumber];
				
				for(int i = 0; i < attributesNumber; i++){
				    textTab[i] = new Text(shell, SWT.BORDER);
				    textTab[i].setBounds(621, 30*i + 100, 175, 19);
				    textTab[i].setMessage(listAttributes[i]);
				}
				isTextTabSet = true;
			}
		});
	    
	    Button btnSubmitInsert = new Button(shell, SWT.NONE);
	    btnSubmitInsert.setBounds(648, 47, 139, 28);
	    btnSubmitInsert.setText("Submit Insertion");
	    
	    btnSubmitInsert.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				String table = comboInsert.getText().toUpperCase();
				String[] values = new String[attributesNumber];
				for(int i = 0; i < values.length; i++){
					values[i] = textTab[i].getText();
				}
				
				DatabaseConnector dbConnector = new DatabaseConnector();
				String result = dbConnector.insertElement(table, values);
				
				displayResult(result);
				
				dbConnector.closeConnection();
				
				
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
				// TODO Auto-generated method stub
				
			}
		});
	    
	    Combo comboDelete = new Combo(shell, SWT.NONE);
	    comboDelete.setBounds(829, 19, 185, 40);
	    comboDelete.setText("Choose table: ");
	    comboDelete.setItems(availableTables);
	    
	    firstIDToDelete = new Text(shell, SWT.BORDER);
	    firstIDToDelete.setBounds(829, 92, 185, 19);
	    firstIDToDelete.setVisible(false);
	    
	    secondIDToDelete = new Text(shell, SWT.BORDER);
	    secondIDToDelete.setBounds(829, 131, 185, 19);
	    secondIDToDelete.setVisible(false);
	    
	    Button btnSubmitDelete = new Button(shell, SWT.NONE);
	    btnSubmitDelete.setBounds(862, 47, 152, 28);
	    btnSubmitDelete.setText("Submit Deletion");
	   
	    btnSubmitDelete.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				String table = comboDelete.getText().toUpperCase();
				String firstID = "";
				String result = "";
				
				DatabaseConnector dbConnector = new DatabaseConnector();

				if(doubleID){
					firstID = firstIDToDelete.getText();
					String secondID = secondIDToDelete.getText();					
					String[] ids = new String[]{firstID, secondID};
					
					result = dbConnector.deleteElement(table, ids);
				} else {
					firstID = firstIDToDelete.getText();
					
					result = dbConnector.deleteElement(table, firstID);
				}
				
				displayResult(result);
				dbConnector.closeConnection();
				
			}
		});
	    
	    comboDelete.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
				textResult.setVisible(false);
				if(isDeletionSet){
					firstIDToDelete.setVisible(false);
					secondIDToDelete.setVisible(false);
				}
				String selectedTable = comboDelete.getText().toUpperCase();
				
				if(selectedTable.equals("ARTISTS") || selectedTable.equals("BRANDGROUP") || selectedTable.equals("CHARACTERS") || 
						selectedTable.equals("COUNTRY") || selectedTable.equals("GENRE") || selectedTable.equals("INDICIAPUBLISHER") ||
						selectedTable.equals("ISSUE") || selectedTable.equals("ISSUEREPRINT") || selectedTable.equals("LANGUAGE") ||
						selectedTable.equals("PERSONS") || selectedTable.equals("PUBLISHER") || selectedTable.equals("SERIES") ||
						selectedTable.equals("STORY") || selectedTable.equals("STORYREPRINT") || selectedTable.equals("STORY_TYPE")){
                    
					firstIDToDelete.setVisible(true);
				} else {
					doubleID = true;
					firstIDToDelete.setVisible(true);
					secondIDToDelete.setVisible(true);
				}
				isDeletionSet = true;
			}
		});
		
	}
	
	private void createTableItems(){
	    TableItem artists = new TableItem(table, SWT.NONE);
	    artists.setText("Artists");
	    TableItem brandgroup = new TableItem(table, SWT.NONE);
	    brandgroup.setText("BrandGroup");
	    TableItem characters = new TableItem(table, SWT.NONE);
	    characters.setText("Characters");
	    TableItem country = new TableItem(table, SWT.NONE);
	    country.setText("Country");
	    TableItem genre = new TableItem(table, SWT.NONE);
	    genre.setText("Genre");
	    TableItem indiciapublisher = new TableItem(table, SWT.NONE);
	    indiciapublisher.setText("IndiciaPublisher");
	    TableItem issue = new TableItem(table, SWT.NONE);
	    issue.setText("Issue");
	    TableItem language = new TableItem(table, SWT.NONE);
	    language.setText("Language");
	    TableItem persons = new TableItem(table, SWT.NONE);
	    persons.setText("Persons");
	    TableItem publisher = new TableItem(table, SWT.NONE);
	    publisher.setText("Publisher");
	    TableItem series = new TableItem(table, SWT.NONE);
	    series.setText("Series");
	    TableItem story = new TableItem(table, SWT.NONE);
	    story.setText("Story");
	    TableItem storyType = new TableItem(table, SWT.NONE);
	    storyType.setText("Story_Type");
	}
	
	private void displayResult(String result){
		for(int i = 0; i < attributesNumber; i++){
			textTab[i].setVisible(false);
		}
		tableIsVisible = !tableIsVisible;
		table.setVisible(false);
		textResult.setVisible(true);
		textResult.setText(result);
	}
}
